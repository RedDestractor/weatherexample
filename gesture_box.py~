from kivy.gesture import GestureDatabase, Gesture
from kivy.uix.boxlayout import BoxLayout

gesture_strings = {
        'left_to_right_line': 'eNq1l01y4zYQRve8iLWJqv8bfQFnmyofIOXYKls1E5sla5LM7dNoypamJg61gTa0mx8eATySADf7L/u/vm+fdm/Hb4fd9OvpOMO0eZxxurt5uf9zdzPNlH/mgae3u5u34+H1y+4t/5Vp83XWafOfkLuKTbN1lGf7+XX/cuzNWm8WnzT7raemGZce9C58zyZI0+0vsAWE5oZMwaDI7Ng79E8PcAVEIdQsrHlD6af/uP//60hdR6en90uAN5Vo0kJIIzTH/PROTyRQEIgwArqu42v06Gc8cgunBmHm5sRyxrM6AyK4q2QCeB3fCh+D8FQSCK/DX84MEvg6ngrPV+FJSMKlEbsZ2/rUU5klHUQvsXQhFrAhWWuN8sag5PsZjx6gebuyoTLUqTV+maUYxedSyye1HS9EYdlWwVVB6YIOpqItlYoSml5BL7PMg+hllnUQvcyyf9ARyDGAmZiM8nCi5ykCFuIwdxehvLHW6eWVYwxdyqrgIHpZFR5EL6tytorGKBjBoe4A6h/0fA0Tg6FwPhV5RtbhJVV8DLycSgyBaylVHAMvo3qN0Vw6GAIt18AA4fXFQ8un6hB26VQfwi6bGiPYVjINh7DLpa2/c3MfQ4RZaZr7G8xtzvqNYiXTdAy8bJqPgZdOiyvgitpyvfDTY7Q+5V46HYewS6fzEHbZ9GseTRWDiznv6P4J8HDY7V4+NvRufUfvPm1uc6HdwnTbXLPH5x9Ox9nbdN8DbQnYz4GoAMZngQYV4BNBfg5gBdQ+DVAF/PMAVyBOo+hXyqL0IhNWscFS1CoaL0VaitaLAroUZSl6FU+9ek/WbEjYD8yaASW/LEaNWtkvmwcuxfZDMUe3CHre7Z+ej6km0mJs4+LXso+Z+Hv/eHzuAZlumfvIsnh8/bo73L889E++0FpTevl0F/0+H14fvz0U1rLVFvPdlKsNRUMl7R9b238BG7y50Q==',
        'right_to_left_line': 'eNq1WNtOI0cQfZ8fgZdYXffqH2BfI/EBEQsWoN2ABd4k+/epqR7saQKZfllLyHDcfaZOnerqwpeP3x7/+rm7378ef7zspy/L+6FMl3cHmK4vnm7+3F9MB4xf442m1+uL1+PL87f9a/zJ0+X3g0yXH5Jc57LpoDOVxf7D8+PTcd7m87b6ybbf51XTAVoEcwg/YwvgdFV2BaTEjyiYF1RRmeP5Z/6cpqvfyk6qo1jxolAKgk2vX2/+/zGcj5Hp/vMn3L+Rs7ESY3VQMtjmTuURxBt3cRUkjhjdsSD5mZtr4AImzg4jcXty11/BjZl6hCFuQUQhYjFHE+Ntdkx2GmIHBiqlKjsVMtFt9vQTZYSd3hXLQOzpKJ4dBXDUKhFj1AVxwRW7VvWoHyzkUgkGYk9PsY7UIjGHoHi4MpjaQOyUrhKMsKNTNSBVQqYyQp6mEg2Ri1CtlcwE3dwH2NNUOpuKQFJMUdAwQmRbsYcXhQCQRIuEK9vsaSrZEDsWtkolEoSRmkrb7GkqnU3FODJCGoUHHjHCmTyMjDJycXKzGlW1Sc7pKcMIOQMAYxSpGijrdl44PWUaIY8jVEnchaPgq2xzp6O8arse6iHOiaBiNVwd02IQRkQ6whGvvN2/OA1lGyJ/178G0pKG8qrzxr0QB1BVOJpIsVWpl2JR/14LEDkB0/alIWmpLJY2jqg6VS3MUCXiXPjjo+jskXi1aJEFZSDvkp4K/SL2dFXkzA5qHAcoGoFHnoqdyGHdHqKB1W3ydFXs15CnqVLP5NFHQr5DBUMAqnJml1K5YjT3Gv1xoDlqWqowRK7RGtXdNLpL1NQ2eTqqNEReEQMu1VVB3bYd1XRURxyN1lJVos0oREWVgcjTUB0xFFeNJ05w2e4BmoZqHSGPoahEv418SBGTbUMtDbWVoXFjaBBECmIIgFrOOY+LP24LJdIYXyoOjDCWjhoNsceEhMISKcGY8Hw7MZaO2trREjUSUwyCWzyF8cxuBAZci0N09prk8/x/+7LfP52medN5nDebLq9AZVemq7hg4u14iGZyM4PWgTVBhzXoJcHqDeQGwgxGDXcgJojUgdTAfjsnSP12aeASkjRQE2TsQrIGdorcG6gdmIrChjVYUxFqDzZFRh3YFL0lxHZ1/ZoXNHXOny5oSr22Bf7fBU31W3o/WJAZiMbx6YLMBuF8Y6xe+snqTBPRSVLqrA20NRitOlEuPZqJijGsp+Z5CS1LMm0xZefGjHxGM1cxcTdUFzQTxOUDusLLEmlLWnQnNPPCwD1qDZUeTdGM3D86VTNRh0JpaO3RVM1LHZ5QbOg7Bmpo/zRoQvkdb9MmC8OSY2jaRHu0aZPao02blh5t2hQ6FJs2xR5t2pbzcEKbtqVDnNCmzT4otuLLkibUlke/oU2oSY82oeY92oR66eonZsOb1uUe9o/3D8f86qFOV1EB68rxaBmx5u/Hu+NDfvsQHJT1EOjx+fv+5ebpdp+fQN68M7405D8OL893P26TOv5vusJdXMseM0UojFZb5vb+dfcvS9NvIw==',
       'down_to_top_line': 'eNq1WNtuHDcMfZ8fiV9qiFdRP+C+FsgHFG6ycIyk9sLetM3fl6K0M1Iy7RpddB+88ZkzRyQPJdG5efz8+Me324fD6+nry2H5uX8f03Lz8QjL+3dP978f3i1H9H/6Fy2v79+9nl6ePx9e/Vdebr4cZbnZFXkftOWoVSr7+8fnx6dTfc3qa+UfXvulspYjtAhqCN/8FcDl7qd0K4lzSQwFFDRrhPNXfUzxOEmiAoKsTAnRbHn97f7fl+FYRpaHvgIrWmYU4JJTkrK8PpzFOVPJAqiq/p2SXlaP3CFv6iQFDZgyoGQuNMozJ6qyJRXMQHRZ3kK+rPJUpk8e1EkYweuSFbOR4EVxDAMQNnGxZGSEREJYUAd1TOwVS2yGwlTeEDtiyNMmv9XcLCHzIA+ZxYuPJSkXfUPhMWzFzVY6t4yy5qT+ZFBnViJLhdwDAyuX5cNX3HxFK4ggomaKmEdbk3EWEm+ZWnb/XFYPW3GzFWVuylEd2TKRd7vn5O5muShPYSxtxiKmsS3pWv1wljZnwZgJgHJGFkmqV+qHt7R5C1PjkF0bf5hLm7kQe9UkYSlc/Rz1xTuG2LctevfQG9TDXNrMTSXrcKqxXaPO4S1v3qa15cW0bs7rasPhLW/eprOrViza6Er98JY3b5Pv/aKcMljdBH4M9AXqo/W0FPPDQfNl+bCWu7X1zC0wLCCFN3Xw6DGjmlAxgjccOhzWclnVt7jr5lUcxMUP4kxm5Fl4B1y+qCScFTiLw1rx2LjrTVLF/cRJfkFZ0pTNLlddwlWhVZun0zLzNdrhqMiqLXPgumlv9xP6JZvx8iUi4aesfmLKeThsDK8SDztltRPHUwB8urhGXMNOXe3E2J5KPmMkIStXaYedutqJozCuV99/akMNO3W1k/rB0hfIV3SKhpm6mknjseJb6BrpsFJXK7mXot/YeoV0DiMz/B/S4WNefeRt+CL2a+GaLZ/Dx7z6yOPM6/1wYcvXvwI+vBwOT+tMn7UO9TkvN3dS4DYtdz4G+Rk9fHQ5Hb3F7gcG7zDKyDDXcNBSA7GBuYEwgvHlIDaQGii300TMlUGNwZXhjb/D4MaQxtgJ0qsQDG0M22FoY1gwgFtwuYKaIjfCHrE1MNIgwp14SmNQY8iPq5XUGC1iKjsMGBkMOwycGBLBFWpgS5RLA7mBOUBpFhWZQG2gjqDCj7mVPDF2KllsZGTcYZSRYSmWhpQmVDoKI1p23IeEE0X3KGNZeK9DIPFEKX35sUrc26IOFyN65o6lYcS9OGyi2B6lFycakWkvVOiVKkGpvREoTGivH7TiQHSrj2M7K0IrDkS7+p9WeyvyRLE9SqtUlOiOs/XldURtL2FoZYPoYx/w9ig2UHyI3Fu+jBToNcE0obmjMKJ9W/uEMKHfVSoYY6GEtL/HQ4rCvZtRJvS8hk5obyfME9qdQxtRmZOGYJSJQT8yKE2MvMOAkaE9esIJ7XESjWju1aQp/7PxNOWf+xahKf9+WfjwN6FnhSn/73d+MMb8NfXYOU1od4lh8K5twIp6nu16/HR4fPh0qv815fe0H8n0fRs658/Hj6dPQWG/q6q+g6fnL4eX+6cPh3ggMTNXvN/jvx5fnj9+/dCU1V+7zV6FOhn4pOg/6vV8+zfaneTS'
}

gestures = GestureDatabase()
for name, gesture_string in gesture_strings.items():
    gesture = gestures.str_to_gesture(gesture_string)
    gesture.name = name
    gestures.add_gesture(gesture)
class GestureBox(BoxLayout):
    def on_touch_down(self, touch):
        touch.ud['gesture_path'] = [(touch.x, touch.y)]
        super(GestureBox, self).on_touch_down(touch)

    def on_touch_move(self, touch):
        touch.ud['gesture_path'].append((touch.x, touch.y))
        super(GestureBox, self).on_touch_move(touch)

    def on_touch_up(self, touch):
        if 'gesture_path' in touch.ud:
            gesture = Gesture()
            gesture.add_stroke(touch.ud['gesture_path'])
            gesture.normalize()
            match = gestures.find(gesture, minscore=0.90)
            if match:
                print("{} happened".format(match[1].name))
        print(touch.ud['gesture_path'])
        super(GestureBox, self).on_touch_up(touch)
