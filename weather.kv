#: import ListAdapter kivy.adapters.listadapter.ListAdapter
#: import main main
WeatherRoot:


<WeatherRoot>:
    carousel: carousel
    locations: locations
    current_weather: current_weather
    forecast: forecast
    BoxLayout:
        orientation: "vertical"
        ActionBar:
            ActionView:
                use_seperator: True
                ActionPrevious:
                    title: "Kivy Weather"
                    with_previous: False
                ActionOverflow:
                    ActionButton:
                        text: "Add Location"
                        on_press: app.root.add_location()
                    ActionButton:
                        text: "Settings"
                        on_press: app.open_settings()
                ActionButton:
                    text: "Locations"
                    on_press: app.root.carousel.load_slide(app.root.locations)
                ActionButton:
                    text: "Current"
                    on_press: app.root.carousel.load_slide(app.root.current_weather)
                ActionButton:
                    text: "Forecast"
                    on_press: app.root.carousel.load_slide(app.root.forecast)
        Carousel:
            id: carousel
            Locations:
                id: locations
            CurrentWeather:
                id: current_weather
            Forecast:
                id: forecast

<ForecastLabel@BoxLayout>:
    date: ""
    conditions_image: ""
    conditions: ""
    temp_min: None
    temp_max: None
    canvas.before:
        Color:
            rgb: [.2, .2, .2]
        Line:
            points: [self.pos[0], self.pos[1], self.width, self.pos[1]]
    Label:
        text: root.date
    BoxLayout:
        orientation: "vertical"
        AsyncImage:
            source: root.conditions_image
        Label:
            text: root.conditions
    BoxLayout:
        orientation: "vertical"
        Label:
            text: "Low: {}".format(root.temp_min)
        Label:
            text: "High: {}".format(root.temp_max)


<Forecast>:
    forecast_container: forecast_container
    orientation: "vertical"

    on_left_to_right_line: app.root.show_current_weather(root.location)
    on_down_to_top_line: root.update_weather()
    Label:
        size_hin_y: .1
        font_size: "15dp"
        text: "{} ({})".format(root.location[0], root.location[1])
    BoxLayout:
        orientation: "vertical"
        id: forecast_container
    
<AddLocationForm>:
    orientation: "vertical"
    search_input: search_box
    search_results: search_results_list
    BoxLayout:
        orientation: "vertical"
        BoxLayout:
            height: "40dp"
            size_hint_y: None
            TextInput:
                id: search_box
                size_hint_x: 25
                focus: True
                multiline: False
                on_text_validate: root.search_location()
            Button:
                text: "Search"
                size_hint_x: 25
                on_press: root.search_location()
            Button:
                size_hint_x: 25
                text: "Current Location"
                on_press: root.current_location()
            Button:
                size_hint_x: 25
                text: "Settings"
                on_press: app.open_settings()
        ListView:
            id: search_results_list
            adapter:
                ListAdapter(
                data=[],
                cls=main.LocationButton,
                args_converter=main.args_converter)
        Button:
            text: "Cancel"
            height: "40dp"
            size_hint_y: None
            on_press: root.dismiss()

<Locations@BoxLayout>:
    orientation: "vertical"
    locations_list: locations_list
    ListView:
        id: locations_list
        adapter:
            ListAdapter(
            data=[],
            cls=main.LocationButton,
            args_converter=main.args_converter)
    BoxLayout:
        orientation: "horizontal"
        size_hint_y: None
        height: "40dp"
        Button:
            text: "Add Location"
            on_press: app.root.add_location()


<LocationButton>:
    text: "{} ({})".format(self.location[0], self.location[1])
    height: "40dp"
    size_hint_y: None
    deselected_color: (1, 0, 1, 1)
    on_press: app.root.show_current_weather(self.location)
<Conditions>:
    Label:
        text: root.conditions

<UnknownConditions@Conditions>:
    conditions: ""
    canvas.before:
        Color:
            rgb: .2, .2, .2
        Ellipse:
            pos: self.pos
            size: self.size

<ClearConditions@Conditions>:
    conditions: ""
    canvas.before:
        Color:
            rgb: .8, .7, .3
        Line:
            cap: "round"
            width: 3
            points:
                [self.center_x - (self.height / 2),
                self.center_y,
                self.center_x + (self.height / 2),
                self.center_y]
        Line:
            cap: "round"
            width: 3
            points:
                [self.center_x,
                self.center_y - (self.height / 2),
                self.center_x,
                self.center_y + (self.height / 2)] 
        Line:
            cap: "round"
            width: 3
            points:
                [self.center_x - (self.height * .35355),
                self.center_y - (self.height * .35355),
                self.center_x + (self.height * .35355),
                self.center_y + (self.height * .35355)]
        Line:
            cap: "round"
            width: 3
            points:
                [self.center_x - (self.height * .35355),
                self.center_y + (self.height * .35355),
                self.center_x + (self.height * .35355),
                self.center_y - (self.height * .35355)]
        Color:
            rgb: .6, .5, .0
        Ellipse:
            pos: self.center_x - ((self.height - 40) / 2), self.pos[1] + 20
            size: [self.height - 40, self.height - 40]

<CurrentWeather>:
    orientation: "vertical"
    on_left_to_right_line: app.root.show_forecast(root.location)
    on_down_to_top_line: root.update_weather()
    BoxLayout:
        Label:
            text: "{} ({})".format(root.location[0], root.location[1])
            font_size: "15dp"
        Label:
            text: "{}".format(root.temp)
            font_size: "30dp"
    BoxLayout:
        orientation: "horizontal"
        Label:
            text: root.conditions
        AsyncImage:
            source: root.conditions_image
    BoxLayout:
        orientation: "horizontal"
        Label:
            text: "Low: {}".format(root.temp_min)
        Label:
            text: "High: {}".format(root.temp_max)

